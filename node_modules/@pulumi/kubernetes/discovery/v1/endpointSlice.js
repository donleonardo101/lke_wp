"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointSlice = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
 */
class EndpointSlice extends pulumi.CustomResource {
    /**
     * Create a EndpointSlice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.addressType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addressType'");
            }
            if ((!args || args.endpoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoints'");
            }
            inputs["addressType"] = args ? args.addressType : undefined;
            inputs["apiVersion"] = "discovery.k8s.io/v1";
            inputs["endpoints"] = args ? args.endpoints : undefined;
            inputs["kind"] = "EndpointSlice";
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["ports"] = args ? args.ports : undefined;
        }
        else {
            inputs["addressType"] = undefined /*out*/;
            inputs["apiVersion"] = undefined /*out*/;
            inputs["endpoints"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["ports"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "kubernetes:discovery.k8s.io/v1beta1:EndpointSlice" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(EndpointSlice.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing EndpointSlice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new EndpointSlice(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EndpointSlice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointSlice.__pulumiType;
    }
}
exports.EndpointSlice = EndpointSlice;
/** @internal */
EndpointSlice.__pulumiType = 'kubernetes:discovery.k8s.io/v1:EndpointSlice';
//# sourceMappingURL=endpointSlice.js.map