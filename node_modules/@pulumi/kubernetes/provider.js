"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The provider type for the kubernetes package.
 */
class Provider extends pulumi.ProviderResource {
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b, _c, _d;
        let inputs = {};
        opts = opts || {};
        {
            inputs["cluster"] = args ? args.cluster : undefined;
            inputs["context"] = args ? args.context : undefined;
            inputs["enableDryRun"] = pulumi.output((_a = (args ? args.enableDryRun : undefined)) !== null && _a !== void 0 ? _a : utilities.getEnvBoolean("PULUMI_K8S_ENABLE_DRY_RUN")).apply(JSON.stringify);
            inputs["helmReleaseSettings"] = pulumi.output(args ? args.helmReleaseSettings : undefined).apply(JSON.stringify);
            inputs["kubeClientSettings"] = pulumi.output(args ? args.kubeClientSettings : undefined).apply(JSON.stringify);
            inputs["kubeconfig"] = (_b = (args ? args.kubeconfig : undefined)) !== null && _b !== void 0 ? _b : utilities.getEnv("KUBECONFIG");
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["renderYamlToDirectory"] = args ? args.renderYamlToDirectory : undefined;
            inputs["suppressDeprecationWarnings"] = pulumi.output((_c = (args ? args.suppressDeprecationWarnings : undefined)) !== null && _c !== void 0 ? _c : utilities.getEnvBoolean("PULUMI_K8S_SUPPRESS_DEPRECATION_WARNINGS")).apply(JSON.stringify);
            inputs["suppressHelmHookWarnings"] = pulumi.output((_d = (args ? args.suppressHelmHookWarnings : undefined)) !== null && _d !== void 0 ? _d : utilities.getEnvBoolean("PULUMI_K8S_SUPPRESS_HELM_HOOK_WARNINGS")).apply(JSON.stringify);
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Provider.__pulumiType, name, inputs, opts);
    }
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }
}
exports.Provider = Provider;
/** @internal */
Provider.__pulumiType = 'kubernetes';
//# sourceMappingURL=provider.js.map