"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Event = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 */
class Event extends pulumi.CustomResource {
    /**
     * Create a Event resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.involvedObject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'involvedObject'");
            }
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["apiVersion"] = "v1";
            inputs["count"] = args ? args.count : undefined;
            inputs["eventTime"] = args ? args.eventTime : undefined;
            inputs["firstTimestamp"] = args ? args.firstTimestamp : undefined;
            inputs["involvedObject"] = args ? args.involvedObject : undefined;
            inputs["kind"] = "Event";
            inputs["lastTimestamp"] = args ? args.lastTimestamp : undefined;
            inputs["message"] = args ? args.message : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["reason"] = args ? args.reason : undefined;
            inputs["related"] = args ? args.related : undefined;
            inputs["reportingComponent"] = args ? args.reportingComponent : undefined;
            inputs["reportingInstance"] = args ? args.reportingInstance : undefined;
            inputs["series"] = args ? args.series : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        else {
            inputs["action"] = undefined /*out*/;
            inputs["apiVersion"] = undefined /*out*/;
            inputs["count"] = undefined /*out*/;
            inputs["eventTime"] = undefined /*out*/;
            inputs["firstTimestamp"] = undefined /*out*/;
            inputs["involvedObject"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["lastTimestamp"] = undefined /*out*/;
            inputs["message"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["reason"] = undefined /*out*/;
            inputs["related"] = undefined /*out*/;
            inputs["reportingComponent"] = undefined /*out*/;
            inputs["reportingInstance"] = undefined /*out*/;
            inputs["series"] = undefined /*out*/;
            inputs["source"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "kubernetes:events.k8s.io/v1:Event" }, { type: "kubernetes:events.k8s.io/v1beta1:Event" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Event.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Event resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Event(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Event.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Event.__pulumiType;
    }
}
exports.Event = Event;
/** @internal */
Event.__pulumiType = 'kubernetes:core/v1:Event';
//# sourceMappingURL=event.js.map